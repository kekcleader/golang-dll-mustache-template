# MUSTACHE RENDERER

The DLL file `mydll.dll` exports two functions:

In C-notation:
  ```c
  char *RenderMustache(char *template, char* jsonStr);
  void MustacheFree(char *str);
  ```

In Go-notation:
  ```go
  func RenderMustache(template, jsonStr *C.char) *C.char
  func MustacheFree(str *C.char)
  ```

The first function has two parameters being a pointer to a
null-terminated ANSI strings containing a template and a pointer to
a JSON structure (in a string) and returns a pointer to a
null-terminated string containing the filled in template.

The returned string is allocated using C malloc function and must be
freed using either C free function or MustacheFree, which just calls
C free function from Go.

# FILES

`mydll.dll` is the compiled DLL

`mydll.go` is the Go source file of the DLL

`mydll.h` is the C-header file for the DLL, auto-generated by Go compiler

`go.mod` is the Go module file, required to compile the Go program

`cprog.c` is a C test program to check if DLL is working

`cprog.exe` is the compiled test program

`prepare.bat` is a Batch file with some commands to prepare the
compilation process, namely set `CGO_ENABLED` environment
variable to 1, and add MinGW-w64 path to the PATH environment
variable (path to the 64-bit version of gcc.exe). GCC is
required by Go compiler when it is used in "c-shared" build
mode.

# COMPILATION

To compile Go DLL file, first set `CGO_ENABLED=1`, add path to
`gcc.exe` to PATH, then run the following:
  ```
  go build -o mydll.dll -buildmode=c-shared mydll.go 
  ```

To compile the test program, type:
  ```
  gcc cprog.c -L. -lmydll
  ```

To run it, type:
  ```
  a.exe
  ```
